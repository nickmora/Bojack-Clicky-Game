{"version":3,"sources":["imgs/0.jpg","imgs/1.jpg","imgs/2.jpg","imgs/3.jpg","imgs/4.jpg","imgs/5.jpg","imgs/6.jpg","imgs/7.jpg","imgs/8.jpg","imgs/9.jpg","imgs/10.jpg","imgs/11.jpg","_components/Pic.js","_components/GameOverDialog.js","_components/GameContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Pic","props","React","useState","clicked","setClicked","Grow","in","Grid","sm","item","md","lg","Card","onClick","reset","increment","shuffle","className","src","path","alt","id","useStyles","makeStyles","dialog","padding","button","background","color","GameOverDialog","classes","open","onClose","Dialog","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","score","DialogActions","Button","variant","imgs","require","GameContainer","generatePics","map","img","key","uuid","setOpen","handleOpen","pics","setPics","rearrange","container","spacing","pic","resetScore","App","setScore","highScore","setHighScore","Typography","arr","temp","randomIndex","currentIndex","length","out","x","Math","floor","random","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.81b45436.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/0.69693e9e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/1.d1adf87c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2.42191237.jpg\";","module.exports = __webpack_public_path__ + \"static/media/3.1b06b0c3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/4.2b0498a3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/5.e48d24cf.jpg\";","module.exports = __webpack_public_path__ + \"static/media/6.a7ae8532.jpg\";","module.exports = __webpack_public_path__ + \"static/media/7.d2b0c715.jpg\";","module.exports = __webpack_public_path__ + \"static/media/8.5a82e315.jpg\";","module.exports = __webpack_public_path__ + \"static/media/9.2ce35072.jpg\";","module.exports = __webpack_public_path__ + \"static/media/10.4c121079.jpg\";","module.exports = __webpack_public_path__ + \"static/media/11.bfa08266.jpg\";","import React from 'react';\nimport { Card, Grid, Grow } from \"@material-ui/core\"\n\nconst Pic = (props) => {\n    const [clicked, setClicked] = React.useState(false)\n    // React.useEffect(() => {\n    //     props.shuffle();\n    // }, [clicked, props])\n\n    const handleClick = () => {\n        if (!clicked) {\n            // console.log(`Yup, you clicked it, my key is ${props.id}`)\n            setClicked(true);\n            props.increment();\n            props.shuffle();\n        }\n        else {\n            // alert(\"GAME OVER!\")\n            props.reset()\n        }\n    }\n    return (\n        <Grow in={true}>\n            <Grid sm={3} item md={3} lg={3}>\n                <Card\n                    onClick={handleClick}\n                >\n                    <img\n                        className=\"dickpic\"\n                        src={props.path}\n                        alt={`Id ${props.id}`}\n                    />\n                </Card>\n            </Grid>\n        </Grow>\n    );\n}\n\nexport default Pic;","import React from 'react';\nimport { Dialog, Button, DialogActions, DialogTitle, DialogContent, DialogContentText } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\n\nconst useStyles = makeStyles({\n    dialog: {\n        padding: \"25px\",\n    },\n    button:{\n        background: \"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)\",\n        color: \"white\"\n    }\n})\nconst GameOverDialog = (props) => {\n    const classes = useStyles();\n    const { open, onClose } = props;\n\n    return (\n        <Dialog\n            open={open}\n            onClose={onClose}\n            aria-labelledby=\"dialog-title\"\n            aria-describedby=\"dialog-description\"\n        >\n            <div className = {classes.dialog}>\n                <DialogTitle id=\"dialog-title\">\n                    {\"Game Over\"}\n                </DialogTitle>\n                <DialogContent >\n                    <DialogContentText id=\"dialog-description\">\n                        Your score was {props.score}\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={onClose} variant = \"contained\" className = {classes.button}>\n                        Click Here to Play Again\n                </Button>\n                </DialogActions>\n            </div>\n        </Dialog>\n    );\n}\n\nexport default GameOverDialog;","import React from 'react';\nimport { Grid } from \"@material-ui/core\";\nimport { v4 as uuid } from \"uuid\";\nimport Pic from \"./Pic\";\nimport GameOverDialog from \"./GameOverDialog\";\nconst imgs = [require(\"../imgs/0.jpg\"), require(\"../imgs/1.jpg\"), require(\"../imgs/2.jpg\"), require(\"../imgs/3.jpg\"), require(\"../imgs/4.jpg\"), require(\"../imgs/5.jpg\"), require(\"../imgs/6.jpg\"), require(\"../imgs/7.jpg\"), require(\"../imgs/8.jpg\"), require(\"../imgs/9.jpg\"), require(\"../imgs/10.jpg\"), require(\"../imgs/11.jpg\")]\n\nconst GameContainer = (props) => {\n    const generatePics = props.shuffle(imgs).map(img => ({ key: uuid(), img }))\n    const [open, setOpen] = React.useState(false);\n    const handleOpen = () => setOpen(true);\n    const handleClose = () => setOpen(false);\n    const [pics, setPics] = React.useState(generatePics)\n    const rearrange = () => setPics(props.shuffle(pics))\n    const resetGame = () => {\n        handleClose();\n        setPics(generatePics);\n        props.resetScore();\n    }\n    // React.useEffect(() => {\n    //     console.log(pics)\n    // }, [pics])\n    return (\n        <div>\n            <Grid container spacing={2}>\n                {pics ? pics.map(pic => {\n                    return (\n                        <Pic\n                            path={pic.img}\n                            shuffle={rearrange}\n                            key={pic.key} id={pic.key}\n                            increment={props.increment}\n                            reset={handleOpen}\n                        />\n                    )\n                })\n\n                    :\n                    <p>\n                        error\n                </p>\n                }\n            </Grid>\n            <GameOverDialog open={open} onClose={resetGame} score={props.score} />\n        </div>\n    );\n}\n\nexport default GameContainer;","import React from 'react';\nimport './App.css';\nimport GameContainer from './_components/GameContainer';\nimport {Typography} from \"@material-ui/core\";\n\nfunction App() {\n  function shuffle (arr) {\n    let currentIndex = arr.length;\n    let out = arr.map(x=>x)\n    let temp, randomIndex;\n    while (currentIndex !== 0){\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temp = out[currentIndex];\n      out[currentIndex] = out[randomIndex];\n      out[randomIndex] = temp;\n    }\n    return out\n  }\n  const [score, setScore] = React.useState(0);\n  const [highScore, setHighScore] = React.useState(0);\n  const increment = () => setScore(score + 1);\n  const resetScore = () => {\n    if(score > highScore) setHighScore(score);\n    setScore(0);\n  };\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Typography>Click the pics!</Typography>\n        <Typography>High Score: {highScore}</Typography>\n        <Typography>Score: {score}</Typography>\n      </header>\n      <GameContainer \n        shuffle = {shuffle}\n        increment = {increment}\n        resetScore = {resetScore}\n        score = {score}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}